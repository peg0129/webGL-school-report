---
import Layout from '../layouts/Layout.astro';
---

<Layout title="002">
	<div id="webgl"></div>
</Layout>

<style>

</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
	import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader";

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();

		Promise.all([app.loadHdr(), app.loadModelProppeler(), app.loadModelHead(), app.loadModelBody()]).
		then(() => {
			// 初期化
			app.init();
			// 描画
			app.render();
		})
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラ定義のための定数
		 */
		static get CAMERA_PARAM() {
			return {
				// fovy は Field of View Y のことで、縦方向の視野角を意味する
				fovy: 60,
				// 描画する空間のアスペクト比（縦横比）
				aspect: window.innerWidth / window.innerHeight,
				// 描画する空間のニアクリップ面（最近面）
				near: 0.1,
				// 描画する空間のファークリップ面（最遠面）
				far: 20.0,
				// カメラの位置
				x: 0.0,
				y: 2.0,
				z: 10.0,
				// カメラの中止点
				lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0xffffff,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 1.0,          // 光の向きを表すベクトルの X 要素
				y: 1.0,          // 光の向きを表すベクトルの Y 要素
				z: 1.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
		 * マテリアル定義のための定数
		 */
		static get MATERIAL_PARAM() {
			return {
				color: 0x3399ff, // マテリアルの基本色
				side: THREE.DoubleSide, // THREE.FrontSide THREE.BackSide THREE.DoubleSide
			};
		}

		/* static get MATERIAL_PARAM() {
			return {
				color: 0xA63744, // マテリアルの基本色
				metalness: 0.5,
				roughness: 0.5
			};
		} */

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;
		boxGeometry: any;
		cylinderGeometry: any;
		propellerGroupWrap: any;
		propellerGroupWrapMove: any;
		fan: any;
		model: any;
		modelPropeller: any;
		modelHead: any;
		modelBody: any;
		modelGroupPropellerHead: any;
		modelGroupPropellerHeadBody: any;
		hdr: any;
		controls: any;
		axesHelper: any;

		isDown: any;
		time: any;
		deg: any;
		r: any;
		speed: any;
		lateSpeed: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル
			this.boxGeometry;    // boxジオメトリ
			this.cylinderGeometry; //円柱ジオメトリ
			this.propellerGroupWrap;
			this.propellerGroupWrapMove;
			this.fan;
			this.modelPropeller;
			this.modelHead;
			this.modelGroupPropellerHead;
			this.modelBody;
			this.modelGroupPropellerHeadBody;
			this.hdr;
			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isDown = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// キーの押下や離す操作を検出できるようにする
			window.addEventListener('keydown', (keyEvent) => {
				switch (keyEvent.key) {
					case ' ':
						this.isDown = true;
						break;
					default:
				}
			}, false);
			window.addEventListener('keyup', (keyEvent) => {
				this.isDown = false;
			}, false);

			// リサイズイベント
			window.addEventListener('resize', () => {
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				this.camera.aspect = window.innerWidth / window.innerHeight;
				this.camera.updateProjectionMatrix();
			}, false);
		}

		/**
		 * アセット（素材）のロードを行う Promise
		 */
		loadHdr() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/little_paris_eiffel_tower_4k.hdr';
				} else {
					url = '../little_paris_eiffel_tower_4k.hdr';
				}

				const loader = new RGBELoader();

				loader.load(url, (texture) => {
					//金属用の環境マップを定義
					texture.mapping = THREE.EquirectangularReflectionMapping;

					//情報をグローバルで使えるように格納
					this.hdr = texture;

					// Promise を解決
					resolve();
				});
			});
		}

		loadModelProppeler() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/propeller.glb';
				} else {
					url = '../propeller.glb';
				}

				const loader = new GLTFLoader();

				loader.load(url, (glb) => {
					this.modelPropeller = glb.scene;

					// Promise を解決
					resolve();
				});
			});
		}

		loadModelHead() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/head.glb';
				} else {
					url = '../head.glb';
				}

				const loader = new GLTFLoader();

				loader.load(url, (glb) => {
					this.modelHead = glb.scene;

					// Promise を解決
					resolve();
				});
			});
		}

		loadModelBody() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/body.glb';
				} else {
					url = '../body.glb';
				}

				const loader = new GLTFLoader();
				
				loader.load(url, (glb) => {
					this.modelBody = glb.scene;

					// Promise を解決
					resolve();
				});
			});
		}

		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			/* this.renderer.outputEncoding = THREE.GammaEncoding; */
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);

			// シーン
			this.scene = new THREE.Scene();
			/* this.scene.environment = this.hdr;  */

			// カメラ
			this.camera = new THREE.PerspectiveCamera(
				App3.CAMERA_PARAM.fovy,
				App3.CAMERA_PARAM.aspect,
				App3.CAMERA_PARAM.near,
				App3.CAMERA_PARAM.far,
			);
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			/* this.material = new THREE.MeshPhongMaterial(App3.MATERIAL_PARAM); */
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// 共通のジオメトリ、マテリアルから、複数のメッシュインスタンスを作成する @@@
			//プロペラ部分
			this.boxGeometry = new THREE.BoxGeometry(1.0, 2.0, 0.1);

			const propellerGroup1 = new THREE.Group();
			const propellerGroup2 = new THREE.Group();
			const propellerGroup3 = new THREE.Group();
			this.propellerGroupWrap = new THREE.Group();
			this.propellerGroupWrapMove = new THREE.Group();
			this.fan = new THREE.Group();

			const propeller1 = new THREE.Mesh(this.boxGeometry, this.material);
			propeller1.position.y = 1.0;
			propellerGroup1.add(propeller1);
			this.propellerGroupWrap.add(propellerGroup1);

			const propeller2 = new THREE.Mesh(this.boxGeometry, this.material);
			propeller2.position.y = 1.0;
			propellerGroup2.add(propeller2);
			propellerGroup2.rotation.z = Math.PI / 3 * 2; // Math.PI = 180
			this.propellerGroupWrap.add(propellerGroup2);

			const propeller3 = new THREE.Mesh(this.boxGeometry, this.material);
			propeller3.position.y = 1.0;
			propellerGroup3.add(propeller3);
			propellerGroup3.rotation.z = (Math.PI / 3 * 2) * 2;
			this.propellerGroupWrap.add(propellerGroup3);

			this.propellerGroupWrap.position.z = 1.5;

			this.propellerGroupWrapMove.add(this.propellerGroupWrap);
			this.propellerGroupWrapMove.position.y = 3.0;
			

			//プロペラの付け根・ヘッド
			const root = new THREE.Mesh(new THREE.CylinderGeometry ( 0.5, 0.5, 1.75, 40, 20, false), this.material);
			root.position.z = 1.0;
			root.rotation.x = Math.PI / 2;
			this.propellerGroupWrapMove.add(root);

			const head = new THREE.Mesh(new THREE.CylinderGeometry ( 2.2, 2.2, 1.75, 40, 20, true), this.material);
			head.position.z = 1.0;
			head.rotation.x = Math.PI / 2;
			this.propellerGroupWrapMove.add(head);

			this.fan.add(this.propellerGroupWrapMove);

			//その他
			const shaft = new THREE.Mesh(new THREE.CylinderGeometry ( 0.1, 0.1, 6.0, 20, 20, false), this.material);
			this.fan.add(shaft);

			const foot = new THREE.Mesh(new THREE.CylinderGeometry ( 2.0, 2.0, 0.15, 40, 20, false), this.material);
			foot.position.y = - 3.0;
			this.fan.add(foot);

			this.fan.scale.x = 0.75;
			this.fan.scale.y = 0.75;
			this.fan.scale.z = 0.75;
			this.fan.position.x = 3;

			this.scene.add(this.fan);

			//モデル
			this.modelGroupPropellerHead = new THREE.Group();
			this.modelGroupPropellerHeadBody = new THREE.Group();

			this.modelBody.traverse((object) => {
				if(object.name == 'metal001') { //three.js側でパラメーター操作したいメッシュ（オブジェクト）を判定
					object.material.envMap = this.hdr; //共通のマテリアル全てに設定が入るみたい？（※マテリアル自体にアプローチしてるから、そのマテリアルを使用している全てに影響しそう）
				}
			});

			console.log(this.modelPropeller)
			this.modelGroupPropellerHead.add(this.modelPropeller);
			this.modelGroupPropellerHead.add(this.modelHead);
			this.modelGroupPropellerHeadBody.add(this.modelGroupPropellerHead);
			this.modelGroupPropellerHeadBody.add(this.modelBody);

			this.modelGroupPropellerHeadBody.scale.x = 0.6;
			this.modelGroupPropellerHeadBody.scale.y = 0.6;
			this.modelGroupPropellerHeadBody.scale.z = 0.6;
			this.modelGroupPropellerHeadBody.position.x = -3.0;

			this.scene.add(this.modelGroupPropellerHeadBody);

			// コントロール
			this.controls = new OrbitControls(this.camera, this.renderer.domElement);

			//タイマー
			this.time = new THREE.Clock();

			// ヘルパー
			const axesBarLength = 5.0;
			this.axesHelper = new THREE.AxesHelper(axesBarLength);
			this.scene.add(this.axesHelper);
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			this.controls.update();

			//青モデル
			this.propellerGroupWrap.rotation.z = this.time.getElapsedTime() * 20.0 + (Math.sin(this.time.getElapsedTime()) * 10.0);
			this.propellerGroupWrapMove.rotation.y = Math.PI / 2 / 2 + (Math.sin(this.time.getElapsedTime() * 0.8) * (Math.PI / 2 / 2));

			//黒モデル
			this.modelPropeller.children[0].rotation.y = this.time.getElapsedTime() * 20.0 + (Math.sin(this.time.getElapsedTime()) * 10.0) * -1.0;
			this.modelGroupPropellerHead.rotation.y = Math.PI / 2 / 2 + (Math.sin(this.time.getElapsedTime() * 0.8) * (Math.PI / 2 / 2)) ;


			// レンダラーで描画
			this.renderer.render(this.scene, this.camera);
		}
	}

</script>
