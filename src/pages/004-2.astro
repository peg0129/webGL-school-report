---
import Layout from '../layouts/Layout.astro';
---

<Layout title="004">
	<div id="webgl"></div>

</Layout>

<style>
	#webgl{
		position: fixed;
		top: 0;
		left: 0;
	}

	.contents{
		position: fixed;
		z-index: 100;
		bottom: 0;
		right: 0;
	}
</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
	import { gsap } from "gsap";

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();

		Promise.all([app.loadTexture()]).
		then(() => {
			// 初期化
			app.init();
			// 描画
			app.render();
		})
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラで撮影する範囲を表す定数 @@@
		 */
		static get CAMERA_SCALE() {return 5.0;} // ※1 (0, 0)から上下にこの値をとる
		/**
		 * カメラ定義のための定数 @@@
		 */
		static get CAMERA_PARAM() {
			// 平行投影（正射影）変換用のパラメータを計算する
			const aspect = window.innerWidth / window.innerHeight; // アスペクト比
			const horizontal = window.innerWidth / 2;              // 横方向のスケール ※1 (0, 0)から上下にこの値をとる positionやscaleが画面に写る最大値
			const vertiacal = window.innerHeight / 2;              // 縦方向のスケール ※1 (0, 0)から上下にこの値をとる positionやscaleが画面に写る最大値
			return {
				left: -horizontal,  // 切り取る空間の左端までの距離
				right: horizontal,  // 切り取る空間の右端までの距離
				top: vertiacal,     // 切り取る空間の上端までの距離
				bottom: -vertiacal, // 切り取る空間の下端までの距離
				near: 0.1,
				far: 200.0,
				x: 0.0, // 正面
				y: 0.0, // 正面
				z: 200.0,
				lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0x000000,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 30.0,          // 光の向きを表すベクトルの X 要素
				y: 30.0,          // 光の向きを表すベクトルの Y 要素
				z: 500.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
	  * 影に関する定数の定義 @@@
	  */
		static get SHADOW_PARAM() {
			return {
				spaceSize: window.innerWidth, // 影を生成するためのカメラの空間の広さ
				mapSize: 4096,     // 影を生成するためのバッファのサイズ
			}
		}
		/**
		 * マテリアル定義のための定数
		 */
		static get MATERIAL_PARAM() {
			return {
				color: 0x000000, // マテリアルの基本色
				side: THREE.DoubleSide, // THREE.FrontSide THREE.BackSide THREE.DoubleSide
			};
		}

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;
		controls: any;
		axesHelper: any;

		isClick: any;
		time: any;

		raycaster: any;
		plane: any;
		planeGroup: any;
		planeArray: any;
		backupScale: any;
		texture: any;
		planeWidth: any;
		planeHeight: any;
		planeTotalHeight: any;

		down: any;
		click: any;
		preventClick: any;
		downStartPos: any;
		currentPos: any;
		lastPos: any;
		deltaPos: any;
		xScroll: any;
		yScroll: any;
		velocity: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル
			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isClick = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間

			this.raycaster;
			this.plane;
			this.planeGroup;
			this.planeArray;
			this.backupScale;
			this.texture;
			this.planeWidth;
			this.planeHeight;
			this.planeTotalHeight;


			this.down;
			this.click;
			this.preventClick;
			this.downStartPos;
			this.currentPos;
			this.lastPos;
			this.deltaPos;
			this.xScroll;
			this.yScroll;
			this.velocity;

			// Raycaster のインスタンスを生成する @@@
			this.raycaster = new THREE.Raycaster();
			// マウスのクリックイベントの定義 @@@
			window.addEventListener('click', (mouseEvent) => {
				// pointerdown → pointermove → pointerup → clickの順
				if(this.preventClick == false){
					// スクリーン空間の座標系をレイキャスター用に正規化する（-1.0 ~ 1.0 の範囲）
					const x = mouseEvent.clientX / window.innerWidth * 2.0 - 1.0;
					const y = mouseEvent.clientY / window.innerHeight * 2.0 - 1.0;
					// スクリーン空間は上下が反転している点に注意（Y だけ符号を反転させる）
					const v = new THREE.Vector2(x, -y);
					// レイキャスターに正規化済みマウス座標とカメラを指定する
					this.raycaster.setFromCamera(v, this.camera);
					// scene に含まれるすべてのオブジェクトを対象にレイキャストする
					// intersectObjects（配列 Array）
					const intersects = this.raycaster.intersectObjects(this.planeArray);
					// レイ判定
					if (intersects.length > 0) {
						// カメラに近いものからキャストされて配列に格納されるので、配列の0番だけを変えることで、重なってても1個だけマテリアルを変更できてる。
						console.log('hit');
						console.log(intersects[0].object.position.x);
					}
				}
			}, false);

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// リサイズイベント
			window.addEventListener('resize', () => {
/* 				// カメラの更新
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				// OrthographicCamera 用のパラメータを求める
				const aspect = window.innerWidth / window.innerHeight;
				const scale = App3.CAMERA_SCALE;
				const horizontal = window.innerWidth / 2;
				const vertiacal = window.innerHeight / 2;
				this.camera.left = -horizontal;
				this.camera.right = horizontal;
				this.camera.top = vertiacal;
				this.camera.bottom = -vertiacal;
				 */
				this.camera.updateProjectionMatrix();
			}, false);
		}

		// texture load
		loadTexture() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/004-2-files/world_map.jpg';
				} else {
					url = '../004-2-files/world_map.jpg';
				}

				const loader = new THREE.TextureLoader();

				loader.load(url, (texture) => {
					this.texture = texture;

					// Promise を解決
					resolve();
				});
			});
		}


		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			/* this.renderer.outputEncoding = THREE.GammaEncoding; */
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			this.renderer.shadowMap.enabled = true;
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);
			
			// シーン
			this.scene = new THREE.Scene();

			// カメラ
			this.camera = new THREE.OrthographicCamera(
        App3.CAMERA_PARAM.left,
        App3.CAMERA_PARAM.right,
        App3.CAMERA_PARAM.top,
        App3.CAMERA_PARAM.bottom,
        App3.CAMERA_PARAM.near,
        App3.CAMERA_PARAM.far
    );
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);
			this.directionalLight.castShadow = true;
			// 影用のカメラ（平行投影のカメラ）は必要に応じて範囲を広げる @@@
			this.directionalLight.shadow.camera.top    =  App3.SHADOW_PARAM.spaceSize;
			this.directionalLight.shadow.camera.bottom = -App3.SHADOW_PARAM.spaceSize;
			this.directionalLight.shadow.camera.left   = -App3.SHADOW_PARAM.spaceSize;
			this.directionalLight.shadow.camera.right  =  App3.SHADOW_PARAM.spaceSize;
			// 影用のバッファのサイズは変更することもできる @@@
			this.directionalLight.shadow.mapSize.width  = App3.SHADOW_PARAM.mapSize;
			this.directionalLight.shadow.mapSize.height = App3.SHADOW_PARAM.mapSize;
			// helper
			const directionalLightHelper = new THREE.DirectionalLightHelper(this.directionalLight, 100);
			this.scene.add(directionalLightHelper);

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// コントロール
			/* this.controls = new OrbitControls(this.camera, this.renderer.domElement); */

			// タイマー
			this.time = new THREE.Clock();

			// ヘルパー
			const axesBarLength = 1000.0;
			this.axesHelper = new THREE.AxesHelper(axesBarLength);
			this.scene.add(this.axesHelper);

			// マウスイベント
			this.down = false
			this.click = false
			this.preventClick = false
			this.downStartPos = { x: 0, y: 0 }
			this.currentPos = { x: 0, y: 0 }
			this.lastPos = { x: 0, y: 0 }
			this.deltaPos = { x: 0, y: 0 }
			const target = document.body;

			target.addEventListener("pointerdown", e => {
				this.currentPos.x = e.clientX;
				this.currentPos.y = e.clientY;
				this.lastPos.x = e.clientX;
				this.lastPos.y = e.clientY;
				if (e.button === 0) {
					this.down = true;
					this.click = false;
					this.preventClick = false;
				}
				// Object.assign() 第一引数に第二引数を上書き（ないものは追加して）した第一引数を返す。
				Object.assign(this.downStartPos, this.currentPos);
			})

			target.addEventListener("pointermove", e => {
				this.currentPos.x = e.clientX;
				this.currentPos.y = e.clientY;

				const dist = Math.sqrt((this.currentPos.x - this.downStartPos.x) ** 2 + (this.currentPos.y - this.downStartPos.y) ** 2);

				if (dist > 3) this.preventClick = true;
			})

			target.addEventListener("pointerup", e => {
				this.currentPos.x = e.clientX;
				this.currentPos.y = e.clientY;
				if (e.button === 0) {
					this.down = false;
					if (!this.preventClick) this.click = true;
				}
			})

			// 移動処理
			this.xScroll = 0;
			this.yScroll = 0;
			this.velocity = {x: 0, y: 0};


			// 処理
			// 画像数 行数で割り切れる数
			const count = 20;
			// 列数
			const column = 4;
			// 行数
			const line = count / column;
			// 配列を定義
			this.planeArray = [];
			// グループを定義
			this.planeGroup = new THREE.Group();
			// 横幅の大きさ
			this.planeWidth = window.innerWidth / 4;
			// 縦幅の大きさ
			this.planeHeight = this.planeWidth * (9 / 16);
			// ジオメトリの大きさ定義
			const planeGeometry = new THREE.PlaneGeometry(this.planeWidth, this.planeHeight);
			// マテリアルを定義
			const planeMaterial = new THREE.MeshPhongMaterial({map: this.texture, side: THREE.DoubleSide });
			/* const planeMaterial = new THREE.MeshBasicMaterial({color: '#000' }); */
			// グループにplaneを追加
			for(let a = 0; a < line; a++){
				for(let b = 0; b < column; b++){
					const plane = new THREE.Mesh(planeGeometry, planeMaterial);

					// 上限 + (下限から上限までの範囲 / カラム数で割る * 現在のカラム番号)
					plane.position.x = (window.innerWidth / 2 * -1) + (window.innerWidth / 2 * 2 / (column - 1) * b);
					// 上限 - (高さ * plane間のマージン * ライン番号)
					plane.position.y = (window.innerHeight / 2) - this.planeHeight * 1.5 * a;

					if(a == line - 1){
						this.planeTotalHeight = ((window.innerHeight / 2) - this.planeHeight * 1.5 * 0) - ((window.innerHeight / 2) - this.planeHeight * 1.5 * a);
						/* console.log(this.planeTotalHeight); */
					}

					plane.position.z = 100;
				
					// 影の設定
					plane.castShadow = true;
					// グループにplaneを追加
					this.planeGroup.add(plane);
					// 配列にplane情報を追加（ray判定用）
					this.planeArray.push(plane);
				}
			}

			// シーンにグループを追加
			this.planeGroup.castShadow = true;
			this.scene.add(this.planeGroup);

			
			const planeBack = new THREE.Mesh(new THREE.PlaneGeometry(window.innerWidth, window.innerHeight), new THREE.MeshPhongMaterial({color: '#fff' }));
			planeBack.position.z = 50;
			planeBack.receiveShadow = true;
			this.scene.add(planeBack);

			console.log(this.scene)
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			/* this.controls.update(); */

			this.deltaPos.x = this.currentPos.x - this.lastPos.x
			this.deltaPos.y = this.currentPos.y - this.lastPos.y
			Object.assign(this.lastPos, this.currentPos)

			if(this.down){
				// スクロール量で足りない場合はかける（ワールド空間をwindowサイズした場合）、大きい場合は割る（ワールド空間を5とかにした場合）
				this.velocity.x = this.deltaPos.x * 3.0; 
				// スクロール量で足りない場合はかける（ワールド空間をwindowサイズした場合）、大きい場合は割る（ワールド空間を5とかにした場合）
				this.velocity.y = this.deltaPos.y * 3.0 * -1.0; 

				this.xScroll += this.velocity.x;
				this.yScroll += this.velocity.y;
			} else {
				if(Math.abs(this.xScroll) > Number.EPSILON){
					// 発生したスクロール量を減産して0に近づける
					this.xScroll -= this.xScroll * 0.075;
				} else {
					this.xScroll = 0;
				}
				if(Math.abs(this.yScroll) > Number.EPSILON){
					// 発生したスクロール量を減産して0に近づける
					this.yScroll -= this.yScroll * 0.075;
				} else {
					this.yScroll = 0;
				}
			}
			// 減少し続けるスクロールをそのままかけるとえらいことになるので、補正係数で値を調整して足し続ける。
			this.planeGroup.position.x += 0 + this.xScroll * 0.01;
			// 減少し続けるスクロールをそのままかけるとえらいことになるので、補正係数で値を調整して足し続ける。
			this.planeGroup.position.y += 0 + this.yScroll * 0.01;
			// クリックフラグを戻す。
			this.click = false;

			this.planeArray.forEach((element, index) => {
				const planePosition = element.getWorldPosition(new THREE.Vector3());
				// .project()はthree.jsのcameraメソッドの一つ。object3dのpositionを与えると、ワールド空間内でどの位置か？正規化して返す（-1~1の範囲）
				const projection = planePosition.project(this.camera);
				const sx = (window.innerWidth / 2.0) * (+projection.x + 1.0);
				const sy = (window.innerHeight / 2.0) * (-projection.y + 1.0);
				/* console.log(sx, sy) */

				if(sx < 0 - this.planeWidth / 2){
					const aaa = (window.innerWidth / 2 * -1) + (window.innerWidth / 2 * 2 / (4 - 1) * 1);
					element.position.x = element.position.x + window.innerWidth + this.planeWidth - (aaa / 2);
				} else if(sx > window.innerWidth + this.planeWidth / 2){
					const aaa = (window.innerWidth / 2 * -1) + (window.innerWidth / 2 * 2 / (4 - 1) * 1);
					element.position.x = element.position.x - window.innerWidth - this.planeWidth + (aaa / 2);
				}

				if(sy < 0 - this.planeHeight / 2){
					const aaa = this.planeHeight * 1.5 * 1;
					element.position.y = element.position.y - this.planeTotalHeight - aaa;
				} else if(sy > this.planeTotalHeight + this.planeHeight / 2){
					const aaa = this.planeHeight * 1.5 * 1;
					element.position.y = element.position.y + this.planeTotalHeight + aaa;
				}
			});



			// レンダラーで描画
			this.renderer.render(this.scene, this.camera);
		}
	}

</script>
