---
import Layout from '../layouts/Layout.astro';
---

<Layout title="004">
	<div id="webgl"></div>

	<div class="text">
		<h1>webGL school report</h1>
		<h2>004-1</h2>
		<ul>
			<li>・Scroll animation</li>
			<li>・Raycaster hover animation</li>
			<li>・Postprocessing</li>
		</ul>
	</div>
</Layout>

<style>
	#webgl{
		position: fixed;
		top: 0;
		left: 0;
		z-index: -1;
	}

	.contents{
		position: fixed;
		z-index: 100;
		bottom: 0;
		right: 0;
	}

	body{
		/*IE(Internet Explorer)・Microsoft Edgeへの対応*/
		-ms-overflow-style: none;
		/*Firefoxへの対応*/
		scrollbar-width: none;
	}

	body::-webkit-scrollbar{
		display: none;
	}
	
	.text{
		position: fixed;
		top: 0;
		left: 0;
		font-family: 'Montserrat', sans-serif;
		margin: 20px 0 0 20px;
	}

	.text h1{
		font-weight: 800;
		font-size: 48px
	}

	.text h2{
		font-weight: 800;
		font-size: 32px
	}

	.text ul{
		list-style: none;
		margin: 20px 0 0;
	}

	.text ul li{
		font-weight: 500;
		font-size: 16px
	}
</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
	import { GUI } from 'three/addons/libs/lil-gui.module.min.js';
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
	import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
	import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
	import { BokehPass } from 'three/addons/postprocessing/BokehPass.js';
	import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
	import { gsap } from "gsap";

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();

		Promise.all([app.loadTexture()]).
		then(() => {
			// 初期化
			app.init();
			// 描画
			app.render();
		})
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラ定義のための定数
		 */
		static get CAMERA_PARAM() {
			return {
				// fovy は Field of View Y のことで、縦方向の視野角を意味する
				fovy: 60,
				// 描画する空間のアスペクト比（縦横比）
				aspect: window.innerWidth / window.innerHeight,
				// 描画する空間のニアクリップ面（最近面）
				near: 5,
				// 描画する空間のファークリップ面（最遠面）
				far: 100.0,
				// カメラの位置
				x: 0.0,
				y: 5.0,
				z: 20.0,
				// カメラの中止点
				lookAt: new THREE.Vector3(2.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0xffffff,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 1.0,          // 光の向きを表すベクトルの X 要素
				y: 1.0,          // 光の向きを表すベクトルの Y 要素
				z: 1.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
		 * マテリアル定義のための定数
		 */
		static get MATERIAL_PARAM() {
			return {
				color: 0xffffff, // マテリアルの基本色
				side: THREE.DoubleSide, // THREE.FrontSide THREE.BackSide THREE.DoubleSide
			};
		}
		/**
		 * イージング関数
		 */
		static easeInSine(x) {
  		return 1 - Math.cos((x * Math.PI) / 2);
		}
		static easeInOutQuint(x) {
			return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
		}

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;
		controls: any;
		axesHelper: any;

		isClick: any;
		time: any;

		plane: any;
		planeArray: any;
		planeGroup: any;
		positionArray: any;
		texture: any;
		lastScroll: any;
		upper: any;
		lower: any;
		speed: any;
		defaultSpeed: any;
		raycaster: any;
		raycasterLockFlg: any;
		postprocessing: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル
			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isClick = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間

			this.plane;
			this.planeArray;
			this.planeGroup;
			this.positionArray;
			this.texture;
			this.lastScroll;
			this.upper;
			this.lower;
			this.speed;
			this.defaultSpeed;
			this.raycaster;
			this.raycasterLockFlg;
			this.postprocessing;

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// リサイズイベント
			window.addEventListener('resize', () => {
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				this.camera.aspect = window.innerWidth / window.innerHeight;
				this.camera.updateProjectionMatrix();
			}, false);

			
			//　スクロールイベント
			this.defaultSpeed = 0.0002;
			this.lower = 1000;
			this.upper = 3000;
			this.lastScroll = this.lower;
			const range = this.upper - this.lower;
			// 初期位置を設定する
			window.scrollTo(0, this.lastScroll);
			console.log(this.lastScroll)
			// スクロール範囲外まで余裕を持って body の高さを設定する
			const bodyHeight = this.upper + window.innerHeight + this.lower;
			document.body.style.height = `${bodyHeight}px`

			window.addEventListener('scroll', ()=> {
				let scroll = window.scrollY || document.documentElement.scrollTop;

				// スクロールを下限y:1000〜上限y:3000までの範囲に制御する
				// 下にスクロール
				if (scroll > this.lastScroll) {
					// デフォルトのスピードより大きい値に更新して、planeGroupの回転量を上げる
					this.speed -= 0.003

					if (scroll >= this.upper) {
						window.scrollTo(0, scroll - range)
						this.lastScroll = scroll - range
					} else {
						this.lastScroll = scroll
					}
				// 上にスクロール
				} else if (scroll < this.lastScroll) {
					// デフォルトのスピードより大きい値に更新して、planeGroupの回転量を上げる
					this.speed += 0.003

					if (scroll <= this.lower) {
						window.scrollTo(0, scroll + range)
						this.lastScroll = scroll + range
					} else {
						this.lastScroll = scroll
					}
				}
			});


			// Raycaster のインスタンスを生成
			this.raycaster = new THREE.Raycaster();
			// flgを初期化
			this.raycasterLockFlg = false;
			// マウスムーブイベント
			window.addEventListener('mousemove', (mouseEvent) => {
				// スクリーン空間の座標系をレイキャスター用に正規化する（-1.0 ~ 1.0 の範囲）
				const x = mouseEvent.clientX / window.innerWidth * 2.0 - 1.0;
				const y = mouseEvent.clientY / window.innerHeight * 2.0 - 1.0;
				// スクリーン空間は上下が反転している点に注意（Y だけ符号を反転させる）
				const v = new THREE.Vector2(x, -y);
				// レイキャスターに正規化済みマウス座標とカメラを指定する
				this.raycaster.setFromCamera(v, this.camera);
				// scene に含まれるすべてのオブジェクトを対象にレイキャストする
				// intersectObjects（配列 Array）
				const intersects = this.raycaster.intersectObjects(this.planeArray);
				// レイ判定
				if (intersects.length > 0 ) {
					// 衝突しているplaneをtrueに変更
					intersects[0].object.userData = true;
					// flgをtrueに変更
					this.raycasterLockFlg = true;

					// 最前面以外のplaneをfalseに変更
					this.planeArray.forEach((element) => {
						if(element.userData == true){

						} else {
							element.userData = false;
						}
					});
				} else{
					this.planeArray.forEach((element) => {
						/* console.log('reset') */
						// リセット
						element.userData = false;
						this.raycasterLockFlg = false;
					});
				}
			}, false);
		}


		// texture load
		loadTexture() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/004-1-files/world_map.jpg';
				} else {
					url = '../004-1-files/world_map.jpg';
				}

				const loader = new THREE.TextureLoader();

				loader.load(url, (texture) => {
					this.texture = texture;

					// Promise を解決
					resolve();
				});
			});
		}


		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			/* this.renderer.outputEncoding = THREE.GammaEncoding; */
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);

			// シーン
			this.scene = new THREE.Scene();

			// カメラ
			this.camera = new THREE.PerspectiveCamera(
				App3.CAMERA_PARAM.fovy,
				App3.CAMERA_PARAM.aspect,
				App3.CAMERA_PARAM.near,
				App3.CAMERA_PARAM.far,
			);
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// コントロール
			/* this.controls = new OrbitControls(this.camera, this.renderer.domElement); */

			// タイマー
			this.time = new THREE.Clock();

			// ヘルパー
			/* const axesBarLength = 5.0;
			this.axesHelper = new THREE.AxesHelper(axesBarLength);
			this.scene.add(this.axesHelper); */

			// planeの枚数
			const planeCount = 16;
			// planeを等間隔で円弧に置いた時の角度
			const rad = 360 / planeCount * Math.PI / 180;
			// 反映
			const radius = 3;
			// 初期化
			this.positionArray = [];
			this.planeArray = [];
			this.planeGroup = new THREE.Group();
			// ワールド座標
			const worldPoint = new THREE.Vector3(0.0, 0.0, 0.0);
			// 基準座標
			const initPoint = new THREE.Vector3(1.0, 0.0, 0.0);
			// 回転基準ベクトル
			const vec1 = new THREE.Vector3().subVectors(initPoint, worldPoint).normalize();

			// 枚数分、円弧上での座標を決定
			for(let i = 0; i < planeCount; i++){
				let array = [];
				// デフォルトx
				const x = radius * Math.cos(rad * i + 1); 
				array.push(x); 
				// デフォルトz
				const z = radius * Math.sin(rad * i + 1);
				array.push(z);
				// マウスオーバー時x
				const xOver = radius * 1.5 * Math.cos(rad * i + 1); 
				array.push(xOver); 
				// マウスオーバー時y
				const zOver = radius * 1.5 * Math.sin(rad * i + 1);
				array.push(zOver);
				// plane1枚分のarrayをpositionArrayへpush
				this.positionArray.push(array)
			}

			// 枚数分planeをインスタンス化
			this.positionArray.forEach((element, index) => {
				const planeGeometry = new THREE.PlaneGeometry(1.5, 1);
				const planeMaterial = new THREE.MeshBasicMaterial({map: this.texture, side: THREE.DoubleSide });
				this.planeArray[index] = new THREE.Mesh(planeGeometry, planeMaterial);
				this.planeArray[index].position.x = element[0]; // x
				this.planeArray[index].position.z = element[1]; // y
				this.planeArray[index].name = index;
				this.planeArray[index].userData = false;

				// 原点→自身の座標から目標のベクトルを求める
				const vec2 = new THREE.Vector3().subVectors(new THREE.Vector3(this.planeArray[index].position.x, this.planeArray[index].position.y, this.planeArray[index].position.z), worldPoint).normalize();
				// 2つのベクトルの直交ベクトルを求める
				const axis = new THREE.Vector3().crossVectors(vec1, vec2).normalize();
				// 内積でコサインを算出
				const cos = vec1.dot(vec2);
				// コサインをラジアンに変換
				const rotateRad = Math.acos(cos);
				// クォータニオンを求める
				const q = new THREE.Quaternion().setFromAxisAngle(axis, rotateRad);
				// クォータニオンをかけて加算させて、回転させる
				this.planeArray[index].quaternion.premultiply(q);
				//　planeをグループに追加
				this.planeGroup.add(this.planeArray[index]);
			});

			// グループの初期値を定義
			this.planeGroup.scale.set(4,4,4)
			this.planeGroup.position.x = -7;
			// シーンにグループを追加
			this.scene.add(this.planeGroup);

			// ポストプロセス処理
			this.postprocessing = {};
			const composer = new EffectComposer(this.renderer);
			const renderPass = new RenderPass(this.scene, this.camera);
			composer.addPass( renderPass );
			const bokehPass = new BokehPass(this.scene, this.camera, {
				focus: 10.0,
				aperture: 10.0 * 0.00001,
				maxblur: 0.014
			} );
			composer.addPass( bokehPass );

			this.postprocessing.composer = composer;
			this.postprocessing.bokeh = bokehPass;

			// GUI
			const effectController = {
				focus: 10.0,
				aperture: 10.0 * 0.00001,
				maxblur: 0.014
			};

			const gui = new GUI();
			gui.add( effectController, 'focus', 0.0, 500.0, 10.0 ).onChange( () => {this.postprocessing.bokeh.uniforms[ 'focus' ].value = effectController.focus} );
			gui.add( effectController, 'aperture', 0.0, 10.0, 1.0 ).onChange( () => {this.postprocessing.bokeh.uniforms[ 'aperture' ].value = effectController.aperture * 0.00001} );
			gui.add( effectController, 'maxblur', 0.0, 0.05, 0.001 ).onChange( () => {this.postprocessing.bokeh.uniforms[ 'maxblur' ].value = effectController.maxblur} );
			gui.close();
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			/* this.controls.update(); */

			// speedがデフォルト値と違う場合
			if (this.defaultSpeed !== this.speed) {
				const delta = this.speed - this.defaultSpeed;
				// Math.abs() …絶対値を取得、マイナスをプラスに
				// Number.EPSILON…0 < Number.EPSILON < 1 の範囲以上
				if (Math.abs(delta) > Number.EPSILON) {
					// 現在のスピードとデフォルトスピードの差分を補正分小さくし、引き続けてデフォルトへ近づける
					this.speed -= delta * 0.05;
				} else {
					// 差分が限りなく0に近づいたらデフォルト値に戻して、引き続けないようにする
					this.speed = this.defaultSpeed;
				}
    	}
			// スピードをrotationに加算
			this.planeGroup.rotation.y += this.speed;

			// plane全てを更新
			this.planeArray.forEach((element, index) => {
				if (element.userData === true) {
					const delta1 = this.positionArray[index][2] - element.position.x;
					const delta2 = this.positionArray[index][3] - element.position.z;
					if(Math.abs(delta1) > Number.EPSILON){
						element.position.x += delta1 * 0.05;
					}
					if(Math.abs(delta2) > Number.EPSILON){
						element.position.z += delta2 * 0.05;
					}
				} else {
					const delta1 = this.positionArray[index][0] - element.position.x;
					const delta2 = this.positionArray[index][1] - element.position.z;
					if(Math.abs(delta1) > Number.EPSILON){
						element.position.x += delta1 * 0.05;
					}
					if(Math.abs(delta2) > Number.EPSILON){
						element.position.z += delta2 * 0.05;
					}
				}
			})

			// レンダラーで描画
			/* this.renderer.render(this.scene, this.camera); */
			// レンダラーでなくコンポーザーに対して描画処理を実行
			this.postprocessing.composer.render();
		}
	}

</script>
