---
import Layout from '../layouts/Layout.astro';
---

<Layout title="001">
	<div id="webgl"></div>
</Layout>

<style>

</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls"

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();
		// 初期化
		app.init();
		// 描画
		app.render();
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラ定義のための定数
		 */
		static get CAMERA_PARAM() {
			return {
				// fovy は Field of View Y のことで、縦方向の視野角を意味する
				fovy: 60,
				// 描画する空間のアスペクト比（縦横比）
				aspect: window.innerWidth / window.innerHeight,
				// 描画する空間のニアクリップ面（最近面）
				near: 0.1,
				// 描画する空間のファークリップ面（最遠面）
				far: 20.0,
				// カメラの位置
				x: 0.0,
				y: 2.0,
				z: 10.0,
				// カメラの中止点
				lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0x030303,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 1.0,          // 光の向きを表すベクトルの X 要素
				y: 1.0,          // 光の向きを表すベクトルの Y 要素
				z: 1.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
		 * マテリアル定義のための定数
		 */
		/* static get MATERIAL_PARAM() {
			return {
				color: 0x3399ff, // マテリアルの基本色
			};
		} */
		static get MATERIAL_PARAM() {
			return {
				color: 0xA63744, // マテリアルの基本色
				metalness: 0.5,
				roughness: 0.5
			};
		}

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;
		boxGeometry: any;
		boxGroup1: any;
		boxArray1: any;
		boxGroup2: any;
		boxArray2: any;
		boxGroup3: any;
		boxArray3: any;
		controls: any;
		axesHelper: any;

		isDown: any;
		time: any;
		deg: any;
		r: any;
		speed: any;
		lateSpeed: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル
			this.boxGeometry;    // トーラスジオメトリ
			this.boxGroup1;
			this.boxArray1;       // トーラスメッシュの配列 @@@
			this.boxGroup2;
			this.boxArray2;
			this.boxGroup3;
			this.boxArray3;
			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isDown = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間
			this.deg;
			this.r = 3.0;
			this.speed = 2.0;
			this.lateSpeed = 10.0;

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// キーの押下や離す操作を検出できるようにする
			window.addEventListener('keydown', (keyEvent) => {
				switch (keyEvent.key) {
					case ' ':
						this.isDown = true;
						break;
					default:
				}
			}, false);
			window.addEventListener('keyup', (keyEvent) => {
				this.isDown = false;
			}, false);

			// リサイズイベント
			window.addEventListener('resize', () => {
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				this.camera.aspect = window.innerWidth / window.innerHeight;
				this.camera.updateProjectionMatrix();
			}, false);
		}

		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);

			// シーン
			this.scene = new THREE.Scene();

			// カメラ
			this.camera = new THREE.PerspectiveCamera(
				App3.CAMERA_PARAM.fovy,
				App3.CAMERA_PARAM.aspect,
				App3.CAMERA_PARAM.near,
				App3.CAMERA_PARAM.far,
			);
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			/* this.material = new THREE.MeshPhongMaterial(App3.MATERIAL_PARAM); */
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// 共通のジオメトリ、マテリアルから、複数のメッシュインスタンスを作成する @@@
			const BOX_COUNT1 = 50;
			const BOX_COUNT2 = 30;
			const BOX_COUNT3 = 20;
			this.boxGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);
			this.boxGroup1 = new THREE.Group();
			this.boxArray1 = [];
			this.boxGroup2 = new THREE.Group();
			this.boxArray2 = [];
			this.boxGroup3 = new THREE.Group();
			this.boxArray3 = [];

			for (let i = 0; i < BOX_COUNT1; ++i) {
				const box = new THREE.Mesh(this.boxGeometry, this.material);
				const denominator = 360 / BOX_COUNT1;
				const molecule = denominator * i;

				box.position.x = (Math.cos(molecule * (Math.PI / 180)) * this.r);
				box.position.y = (Math.sin(molecule * (Math.PI / 180)) * this.r);
				box.rotation.x = Math.random();
				box.rotation.y = Math.random();
				box.rotation.z = Math.random();

				this.boxGroup1.add(box);
				this.boxArray1.push(box);
			}

			for (let i = 0; i < BOX_COUNT2; ++i) {
				const box = new THREE.Mesh(this.boxGeometry, this.material);
				const denominator = 360 / BOX_COUNT2;
				const molecule = denominator * i;

				box.position.x = (Math.cos(molecule * (Math.PI / 180)) * (this.r - 1.0));
				box.position.y = (Math.sin(molecule * (Math.PI / 180)) * (this.r - 1.0));
				box.rotation.x += Math.random();
				box.rotation.y += Math.random();
				box.rotation.z += Math.random();

				this.boxGroup2.add(box);
				this.boxArray2.push(box);
			}

			for (let i = 0; i < BOX_COUNT3; ++i) {
				const box = new THREE.Mesh(this.boxGeometry, this.material);
				const denominator = 360 / BOX_COUNT3;
				const molecule = denominator * i;

				box.position.x = (Math.cos(molecule * (Math.PI / 180)) * (this.r - 2.0));
				box.position.y = (Math.sin(molecule * (Math.PI / 180)) * (this.r - 2.0));
				box.rotation.x += Math.random();
				box.rotation.y += Math.random();
				box.rotation.z += Math.random();

				this.boxGroup3.add(box);
				this.boxArray3.push(box);
			}

			this.scene.add(this.boxGroup1);
			this.scene.add(this.boxGroup2);
			this.scene.add(this.boxGroup3);

			// コントロール
			this.controls = new OrbitControls(this.camera, this.renderer.domElement);

			//タイマー
			this.time = new THREE.Clock();
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			this.controls.update();

			//経過時間
			this.deg = this.time.getElapsedTime() * 20.0;

			this.boxArray1.forEach((box, index) => {
				const denominator = 360 / this.boxArray1.length;
				const molecule = denominator * index;

				box.position.x = (Math.cos((this.deg * this.speed + molecule) * (Math.PI / 180)) * Math.sin(this.deg / this.lateSpeed) * this.r);
				box.position.y = (Math.sin((this.deg * this.speed + molecule) * (Math.PI / 180)) * Math.sin(this.deg / this.lateSpeed) * this.r);
				box.rotation.x += 0.2;
				box.rotation.y += 0.2;
				box.rotation.z += 0.2;

				this.boxGroup1.rotation.x = this.deg * (Math.PI / 180) * 2.0;
			});

			this.boxArray2.forEach((box, index) => {
				const denominator = 360 / this.boxArray2.length;
				const molecule = denominator * index;

				box.position.x = (Math.cos((this.deg * this.speed / 2.0 + molecule) * (Math.PI / 180)) * Math.sin(this.deg / (this.lateSpeed / 1.5)) * (this.r - 1.0));
				box.position.y = (Math.sin((this.deg * this.speed / 2.0 + molecule) * (Math.PI / 180)) * Math.sin(this.deg / (this.lateSpeed / 1.5)) * (this.r - 1.0));
				box.rotation.x += 0.2;
				box.rotation.y += 0.2;
				box.rotation.z += 0.2;

				this.boxGroup2.rotation.y = this.deg * (Math.PI / 180) * 2.0;
			});

			this.boxArray3.forEach((box, index) => {
				const denominator = 360 / this.boxArray3.length;
				const molecule = denominator * index;

				box.position.x = (Math.cos((this.deg * this.speed / 3.0 + molecule) * (Math.PI / 180)) * Math.sin(this.deg / (this.lateSpeed / 2.0)) * (this.r - 2.0));
				box.position.y = (Math.sin((this.deg * this.speed / 3.0 + molecule) * (Math.PI / 180)) * Math.sin(this.deg / (this.lateSpeed / 2.0)) * (this.r - 2.0));
				box.rotation.x += 0.2;
				box.rotation.y += 0.2;
				box.rotation.z += 0.2;

				this.boxGroup3.rotation.x = this.deg * (Math.PI / 180) * 4.0;
				this.boxGroup3.rotation.y = this.deg * (Math.PI / 180) * 4.0;
			});


			// レンダラーで描画
			this.renderer.render(this.scene, this.camera);
		}
	}

</script>
