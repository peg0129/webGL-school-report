---
import Layout from '../layouts/Layout.astro';
---

<Layout title="003">
	<div id="webgl"></div>

	<div class="text">
		<h1>webGL school report</h1>
		<h2>003</h2>
		<ul>
			<li>・Quaternion control</li>
			<li>・Easing animation</li>
			<li>・Shadow</li>
		</ul>
	</div>

	<div class="contents">
		<label for="latitude">latitude</label>
		<input type="text" name="latitude" placeholder="（-90°〜90°）" id="latitude">
		<br>
		<label for="longitude">longitude</label>
		<input type="text" name="longitude" placeholder="（-180°〜180°）" id="longitude">
		<br>
		<button type="button" id="send">move</button>
	</div>
</Layout>

<style>
	#webgl{
		position: fixed;
		top: 0;
		left: 0;
	}

	.text{
		position: fixed;
		top: 0;
		left: 0;
		font-family: 'Montserrat', sans-serif;
		margin: 20px 0 0 20px;
	}

	.text h1{
		font-weight: 800;
		font-size: 48px
	}

	.text h2{
		font-weight: 800;
		font-size: 32px
	}

	.text ul{
		list-style: none;
		margin: 20px 0 0;
	}

	.text ul li{
		font-weight: 500;
		font-size: 16px
	}

	.contents{
		position: fixed;
		z-index: 100;
		bottom: 4%;
		right: 2%;
	}

	.contents label{
		font-family: 'Montserrat', sans-serif;
		font-weight: 800;
		line-height: 2;
		letter-spacing: 0.04em;
	}

	.contents input{
		width: 100%;
		font-size: 16px;
		border: none;
		border-radius: 5px;
		line-height: 1.5;
		padding: 0 5px;
	}

	button {
		padding: 0;
		font-family: inherit;
		appearance: none;
		cursor: pointer;
		background-color: transparent;
		border: none;
	}

	#send{
		font-family: 'Montserrat', sans-serif;
		font-weight: 800;
		font-size: 24px;
		letter-spacing: 0.04em;
		margin: 30px auto 0;
		width: 130px;
		display: flex;
		align-items: center;
		justify-content: center;
		aspect-ratio: 1.5 / 0.7;
		color: #222;
		background-color: #efefef;
		border-radius: 10px;
		box-shadow: -4px -4px 8px #fff, 4px 4px 8px rgb(0 0 0 / 24%);
	}

	@media (any-hover: hover) {
		#send {
			transition: box-shadow 0.4s;
		}

		#send:hover {
			box-shadow: -2px -2px 4px #fff, 2px 2px 4px rgb(0 0 0 / 24%);
		}

		#send:active {
			background-color: #ebebeb;
			box-shadow: inset 4px 4px 8px rgb(0 0 0 / 16%);
		}
	}
</style>

<script>
	import * as THREE from 'three';
	import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
	import { FontLoader } from 'three/addons/loaders/FontLoader.js';
	import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';
	import { gsap } from "gsap";

	// DOM がパースされたことを検出するイベントを設定
	window.addEventListener('DOMContentLoaded', () => {
		// 制御クラスのインスタンスを生成
		const app = new App3();

		Promise.all([app.loadModelPaperAirplane(), app.loadTexture(), app.loadFont()]).
		then(() => {
			// 初期化
			app.init();
			// 描画
			app.render();
		})
	}, false);

	/**
	 * three.js を効率よく扱うために自家製の制御クラスを定義
	 */
	class App3 {
		/**
		 * カメラ定義のための定数
		 */
		static get CAMERA_PARAM() {
			return {
				// fovy は Field of View Y のことで、縦方向の視野角を意味する
				fovy: 60,
				// 描画する空間のアスペクト比（縦横比）
				aspect: window.innerWidth / window.innerHeight,
				// 描画する空間のニアクリップ面（最近面）
				near: 0.1,
				// 描画する空間のファークリップ面（最遠面）
				far: 40.0,
				// カメラの位置
				x: -8.0,
				y: 10.0,
				z: 8.0,
				// カメラの中止点
				lookAt: new THREE.Vector3(0.0, 0.0, 0.0),
			};
		}
		/**
		 * レンダラー定義のための定数
		 */
		static get RENDERER_PARAM() {
			return {
				// レンダラーが背景をリセットする際に使われる背景色
				clearColor: 0xefefef,
				// レンダラーが描画する領域の横幅
				width: window.innerWidth,
				// レンダラーが描画する領域の縦幅
				height: window.innerHeight,
			};
		}
		/**
		 * ディレクショナルライト定義のための定数
		 */
		static get DIRECTIONAL_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 1.0,  // 光の強度
				x: 50.0,          // 光の向きを表すベクトルの X 要素
				y: 50.0,          // 光の向きを表すベクトルの Y 要素
				z: 50.0           // 光の向きを表すベクトルの Z 要素
			};
		}
		/**
		 * アンビエントライト定義のための定数
		 */
		static get AMBIENT_LIGHT_PARAM() {
			return {
				color: 0xffffff, // 光の色
				intensity: 0.5,  // 光の強度
			};
		}
		/**
		 * 影に関する定数の定義 @@@
		 */
		static get SHADOW_PARAM() {
			return {
				spaceSize: 10.0, // 影を生成するためのカメラの空間の広さ
				mapSize: 4096,     // 影を生成するためのバッファのサイズ
			}
			// - 影を生成するためのバッファとは ---------------------------------------
			// 影を生成する原理は、ものすごく簡単に言えば「距離を格納したバッファの中身
			// と実際の値を比較して、遮蔽物があるか調べる」ということを行っています。
			// このとき、バッファが高解像度であれば、当然ながら影かそうでないかがより高
			// 精細にチェックされることになるので、きれいな影が出ます。
			// 一方で、バッファを高解像度にするということはそれだけ負荷が高くなります。
			// mapSize は大きすぎる数値を指定すると一気にパフォーマンスが下がるので注意
			// が必要です。
			// ------------------------------------------------------------------------
		}
		/**
		 * マテリアル定義のための定数
		 */
		static get MATERIAL_PARAM() {
			return {
				color: 0xffffff, // マテリアルの基本色
				side: THREE.DoubleSide, // THREE.FrontSide THREE.BackSide THREE.DoubleSide
			};
		}

		// 地球と紙ヒコーキの距離
		static get PAPERAIRPLANE_DISTANCE(){
			return 3.0;
		}

		// 紙ヒコーキのスピード
		static get PAPERAIRPLANE_SPEED(){
			return 0.05;
		}

		// イージング関数
		static easeInSine(x) {
  		return 1 - Math.cos((x * Math.PI) / 2);
		}
		static easeInOutQuint(x) {
			return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
		}

		renderer: any;
		scene: any;
		camera: any;
		directionalLight: any;
		ambientLight: any;
		material: any;

		font: any;
		fontArray: any;
		paperAirplane: any;
		paperAirplaneGroup: any;
		world: any;
		worldMapTexture: any;
		startPoint: any;
		targetPoint: any;
		startVector: any;
		frame: any;
		nowFrame: any;
		q: any;
		qGroup: any;
		axis: any;
		axisGroup: any;
		paperAirplaneAxis: any;
		tGroup: any;
		thetaGroup: any;
		before: any;
		beforeGroup: any;

		controls: any;
		axesHelper: any;

		isClick: any;
		time: any;

		/**
		 * コンストラクタ
		 * @constructor
		 */
		constructor() {
			this.renderer;         // レンダラ
			this.scene;            // シーン
			this.camera;           // カメラ
			this.directionalLight; // ディレクショナルライト
			this.ambientLight;     // アンビエントライト
			this.material;         // マテリアル

			this.font;
			this.fontArray;
			this.paperAirplane;
			this.paperAirplaneGroup;
			this.world;
			this.worldMapTexture;
			this.targetPoint;
			this.startPoint;
			this.startVector;
			this.frame;
			this.nowFrame;
			this.q;
			this.qGroup;
			this.axis;
			this.axisGroup;
			this.paperAirplaneAxis;
			this.tGroup;
			this.thetaGroup;
			this.before;
			this.beforeGroup;

			this.controls;         // オービットコントロール
			this.axesHelper;       // 軸ヘルパー

			this.isClick = false; // キーの押下状態を保持するフラグ
			this.time; //経過時間

			// 再帰呼び出しのための this 固定
			this.render = this.render.bind(this);

			// リサイズイベント
			window.addEventListener('resize', () => {
				this.renderer.setSize(window.innerWidth, window.innerHeight);
				this.camera.aspect = window.innerWidth / window.innerHeight;
				this.camera.updateProjectionMatrix();
			}, false);
		}

		// texture load
		loadTexture() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/003-files/world_map.jpg';
				} else {
					url = '../003-files/world_map.jpg';
				}

				const loader = new THREE.TextureLoader();

				loader.load(url, (texture) => {
					this.worldMapTexture = texture;

					// Promise を解決
					resolve();
				});
			});
		}

		// glb load
		loadModelPaperAirplane() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/003-files/paper_airplane.glb';
				} else {
					url = '../003-files/paper_airplane.glb';
				}

				const loader = new GLTFLoader();

				loader.load(url, (glb) => {
					this.paperAirplane = glb.scene;

					// Promise を解決
					resolve();
				});
			});
		}

		// font load
		loadFont() {
			return new Promise((resolve) => {
				let url;

				if(location.hostname == '127.0.0.1') {
					url = '../../public/003-files/Montserrat_Bold.json';
				} else {
					url = '../003-files/Montserrat_Bold.json';
				}

				const loader = new FontLoader();

				loader.load(url, (font) => {
					this.font = font;

					// Promise を解決
					resolve();
				});
			});
		}

		/**
		 * 初期化処理
		 */
		init() {
			// レンダラー
			this.renderer = new THREE.WebGLRenderer();
			this.renderer.setClearColor(new THREE.Color(App3.RENDERER_PARAM.clearColor));
			this.renderer.setPixelRatio(window.devicePixelRatio);
			/* this.renderer.outputEncoding = THREE.GammaEncoding; */
			this.renderer.setSize(App3.RENDERER_PARAM.width, App3.RENDERER_PARAM.height);
			const wrapper = document.querySelector('#webgl');
			wrapper.appendChild(this.renderer.domElement);
			this.renderer.shadowMap.enabled = true;

			// シーン
			this.scene = new THREE.Scene();
			/* this.scene.environment = this.hdr;  */

			// カメラ
			this.camera = new THREE.PerspectiveCamera(
				App3.CAMERA_PARAM.fovy,
				App3.CAMERA_PARAM.aspect,
				App3.CAMERA_PARAM.near,
				App3.CAMERA_PARAM.far,
			);
			this.camera.position.set(
				App3.CAMERA_PARAM.x,
				App3.CAMERA_PARAM.y,
				App3.CAMERA_PARAM.z,
			);
			this.camera.lookAt(App3.CAMERA_PARAM.lookAt);

			// ディレクショナルライト（平行光源）
			this.directionalLight = new THREE.DirectionalLight(
				App3.DIRECTIONAL_LIGHT_PARAM.color,
				App3.DIRECTIONAL_LIGHT_PARAM.intensity
			);
			this.directionalLight.position.set(
				App3.DIRECTIONAL_LIGHT_PARAM.x,
				App3.DIRECTIONAL_LIGHT_PARAM.y,
				App3.DIRECTIONAL_LIGHT_PARAM.z,
			);
			this.scene.add(this.directionalLight);
			this.directionalLight.castShadow = true;
			// 影用のカメラ（平行投影のカメラ）は必要に応じて範囲を広げる @@@
			this.directionalLight.shadow.camera.top    =  App3.SHADOW_PARAM.spaceSize;
			this.directionalLight.shadow.camera.bottom = -App3.SHADOW_PARAM.spaceSize;
			this.directionalLight.shadow.camera.left   = -App3.SHADOW_PARAM.spaceSize;
			this.directionalLight.shadow.camera.right  =  App3.SHADOW_PARAM.spaceSize;
			// 影用のバッファのサイズは変更することもできる @@@
			this.directionalLight.shadow.mapSize.width  = App3.SHADOW_PARAM.mapSize;
			this.directionalLight.shadow.mapSize.height = App3.SHADOW_PARAM.mapSize;

			// アンビエントライト（環境光）
			this.ambientLight = new THREE.AmbientLight(
				App3.AMBIENT_LIGHT_PARAM.color,
				App3.AMBIENT_LIGHT_PARAM.intensity,
			);
			this.scene.add(this.ambientLight);

			// マテリアル
			this.material = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);

			// 地球
			/* let worldMaterial = new THREE.MeshStandardMaterial(App3.MATERIAL_PARAM);
			worldMaterial.map = this.worldMapTexture; */
			let worldMaterial = new THREE.MeshPhongMaterial({
				color: 0xFFFFFF,
				shininess: 0,
			});
			this.world = new THREE.Mesh(new THREE.SphereGeometry(2, 32, 32), worldMaterial);
			this.world.receiveShadow = true;
			this.scene.add(this.world);
			console.log(this.world)

			// モデル
			this.paperAirplaneGroup = new THREE.Group();
			this.paperAirplane.position.set(0, 3.0, 0);
			this.paperAirplane.scale.set(0.25, 0.25, 0.25);
			this.paperAirplaneGroup.add(this.paperAirplane);

						// glTF の階層構造をたどり、Mesh が出てきたら影を落とす（cast）設定を行う @@@
						this.paperAirplane.traverse((object) => {
				if (object.isMesh === true || object.isSkinnedMesh === true) {
					object.castShadow = true;
				}
    	});
			this.paperAirplane.castShadow = true;
			this.paperAirplane.children[0].castShadow = true;
			this.paperAirplaneGroup.castShadow = true;

			this.scene.add(this.paperAirplaneGroup);
			console.log(this.paperAirplane)

			// フォント
			this.fontArray = [];

			let fontArray = [
				{font: '0°', x: -5, y: 0, z: 0},
				{font: '90°', x: 0, y: 5, z: 0},
				{font: '-90°', x: 0, y: -5, z: 0},
				{font: '90°', x: 0, y: 0, z: 5},
				{font: '-90°', x: 0, y: 0, z: -5},
				{font: '-180° 180°', x: 5, y: 0, z: 0},
			]

			let fontMaterial = new THREE.MeshPhongMaterial({
				color: 0x333333,
				shininess: 0,
			});
			
			fontArray.forEach((element) => {
				const textGeo = new TextGeometry(element.font, {
					font: this.font,
					size: 0.4,
					height: 0.05,
					curveSegments: 6,
				});

				const fontMesh = new THREE.Mesh(textGeo, fontMaterial);
				fontMesh.position.x = element.x;
				fontMesh.position.y = element.y;
				fontMesh.position.z = element.z;
				fontMesh.lookAt(new THREE.Vector3(this.camera.position.x, this.camera.position.y, this.camera.position.z));
				console.log(this.camera.position)
				this.fontArray.push(fontMesh)
				this.scene.add(fontMesh);
			})

			// コントロール
			this.controls = new OrbitControls(this.camera, this.renderer.domElement);

			//タイマー
			this.time = new THREE.Clock();

			// ヘルパー
/* 			const axesBarLength = 5.0;
			this.axesHelper = new THREE.AxesHelper(axesBarLength);
			this.scene.add(this.axesHelper); */

			// メイン処理
			// 緯度・経度を算出する関数を定義
			const translateGeoCoords = (latitude, longitude, radius) => {
				// 仰角
				const phi = latitude * Math.PI / 180;
				// 方位角
				/* const theta = (longitude - 180) * Math.PI / 180; */ // 入力が360°ver
				// 同じ座標である -180° と 180°の入力が連続した場合、符号逆転を避ける為、片方に合わせる。
				if(longitude == -180){
					longitude = longitude * -1;
				}
				const theta = longitude * Math.PI / 180; // これは入力が-180°~180°ver

				const x = -1 * radius * Math.cos(phi) * Math.cos(theta);
				const y = radius * Math.sin(phi);
				const z = radius * Math.cos(phi) * Math.sin(theta);

				return new THREE.Vector3(x, y, z);
			};

			// 初期化
			this.startPoint = translateGeoCoords(90, 0, 3);
			this.targetPoint;
			this.frame = 100;
			this.nowFrame = 0;
			this.before = 0;
			this.beforeGroup = 0;
			// ワールド原点座標
			const vec0 = new THREE.Vector3(0.0, 0.0, 0.0);
			// モデルの向きの初期ベクトル
			this.startVector = new THREE.Vector3(0.0, 0.0, 1.0).normalize();
			// inputタグの親を格納
			const button = document.getElementById("send");

			// クリックイベント
			button.addEventListener('click', () => {
				// クリックフラグを有効化
				this.isClick = true;

				// 入力された緯度・経度を取得
				const latitude = document.getElementById("latitude").value;
				const longitude = document.getElementById("longitude").value;

				/* クリック時の緯度と経度から3次元座標を計算し格納 引数（緯度, 経度, 半径） */
				this.targetPoint = translateGeoCoords(latitude, longitude, 3);

				console.log(this.targetPoint, this.startPoint)

				// 目標座標と現在座標が同じか？判定する
				//　※ここの処理は不完全。機首方向のみを変えた同座標上の場合、1以下 Number.EPSILON以上の数値が算出されるケースがあり、厳密計算よりはインタラクション側で制限かけた方が良さそう。
				if(this.targetPoint.x == this.startPoint.x && this.targetPoint.y == this.startPoint.y && this.targetPoint.z == this.startPoint.z){
					// 同じ座標の場合
					// クリックフラグをオフ
					this.isClick = false;
				} else {
					// 異なる座標の場合
					/* グループの制御 */
					// 原点→紙ヒコーキのベクトル
					const vec1 = new THREE.Vector3().subVectors(new THREE.Vector3(this.startPoint.x, this.startPoint.y, this.startPoint.z), vec0).normalize();
					// 原点→目的座標のベクトル
					const vec2 = new THREE.Vector3().subVectors(this.targetPoint, vec0).normalize();
					// 2つのベクトルの直交ベクトルを求める
					// ※1 この段階では完全に0にならないパターンがあり、normalize（平方根）とると1になる時があるので、まだnormalize()しない。
					this.axisGroup = new THREE.Vector3().crossVectors(vec1, vec2);

					// x, y, z全てが限りなく0でない場合 → 同一線上のベクトルで直交ベクトルが0の場合
					if(Math.abs(this.axisGroup.x) < Number.EPSILON && Math.abs(this.axisGroup.y) < Number.EPSILON && Math.abs(this.axisGroup.z) < Number.EPSILON){
						console.log('group cross 0')
						// 2つのベクトルの直交ベクトルを求める
						this.axisGroup = new THREE.Vector3().crossVectors(vec1, this.startVector).normalize();
						// 総回転量を180°にする
						const radGroup =  Math.PI;
						// ラジアン → 度 に変換
						this.thetaGroup = radGroup * 180 / Math.PI;
						// 1フレームの回転量を算出
						this.tGroup = this.thetaGroup / this.frame;

						/* 紙ヒコーキの制御 */
						// 移動後の機首のベクトルを求める
						const vec4 = new THREE.Vector3().crossVectors(this.axisGroup, vec2).normalize();
						this.startVector = vec4;
						/* 紙ヒコーキの制御 end */
						
						/* 紙ヒコーキの制御 */
						// 目標座標へ向かって、平行なベクトルを求める
						//const vec3 = new THREE.Vector3().crossVectors(this.axisGroup, vec1).normalize();
						// 移動後の機首のベクトルを求める
						//const vec4 = new THREE.Vector3().crossVectors(this.axisGroup, vec2).normalize();
						// 飛行機の回転軸を求める
						//this.paperAirplaneAxis = new THREE.Vector3().crossVectors(this.startVector, vec3).normalize();
						// 内積でコサインを算出
						//const cos = vec3.dot(this.startVector);
						// コサインをラジアンに変換
						//const rad = Math.acos(cos);
						// 今回動かしたい分の（差分の）クォータニオンを算出
						//this.q = new THREE.Quaternion().setFromAxisAngle(this.paperAirplaneAxis, rad);
						// 現在のクォータニオンにかけて動かす（クォータニオンはかけると加算される）
						//this.paperAirplaneGroup.quaternion.premultiply(this.q);
						// 回転後に機首のベクトルを更新
						//this.startVector = vec4;
						/* 紙ヒコーキの制御 end */

					} else {
						console.log('group cross not 0')
						// ※1 ここで単位化
						this.axisGroup.normalize();
						// 内積でコサインを算出
						const cosGroup = vec2.dot(vec1);
						//　コサインをラジアンに変換（総回転量）
						const radGroup = Math.acos(cosGroup);
						console.log(cosGroup)
						// ラジアン → 度 に変換
						this.thetaGroup = radGroup * 180 / Math.PI;
						// 1フレームの回転量を算出
						this.tGroup = this.thetaGroup / this.frame;

						/* 紙ヒコーキの制御 */
						// 目標座標へ向かって、平行なベクトルを求める
						const vec3 = new THREE.Vector3().crossVectors(this.axisGroup, vec1).normalize();
						// 移動後の機首のベクトルを求める
						const vec4 = new THREE.Vector3().crossVectors(this.axisGroup, vec2).normalize();
						// 飛行機の回転軸を求める
						this.paperAirplaneAxis = new THREE.Vector3().crossVectors(this.startVector, vec3)
						// 飛行機の回転軸が0ベクトルの処理
						if(Math.abs(this.paperAirplaneAxis.x) < Number.EPSILON && Math.abs(this.paperAirplaneAxis.y) < Number.EPSILON && Math.abs(this.paperAirplaneAxis.z) < Number.EPSILON){
							console.log('airplane cross 0')
							// 目標座標へ向かって伸びる平行なベクトルと機首のベクトルとの差を求める
							const vecDifference = vec3.sub(this.startVector);
							// 順方向の場合（全ての差が0になる場合）
							if(Math.abs(vecDifference.x) < Number.EPSILON && Math.abs(vecDifference.y) < Number.EPSILON && Math.abs(vecDifference.z) < Number.EPSILON){
								// 回転後に機首のベクトルを更新
								this.startVector = vec4;
							} else {
							// 総回転量を180°にする
							const rad = Math.PI;
							// 今回動かしたい分の（差分の）クォータニオンを算出
							this.q = new THREE.Quaternion().setFromAxisAngle(vec1, rad);
							// 現在のクォータニオンにかけて動かす（クォータニオンはかけると加算される）
							this.paperAirplaneGroup.quaternion.premultiply(this.q);
							// 回転後に機首のベクトルを更新
							this.startVector = vec4;
							}
						} else {
							console.log('airplane cross not 0')
							this.paperAirplaneAxis.normalize();
							// 内積でコサインを算出
							const cos = vec3.dot(this.startVector);
							// コサインをラジアンに変換
							const rad = Math.acos(cos);
							// 今回動かしたい分の（差分の）クォータニオンを算出
							this.q = new THREE.Quaternion().setFromAxisAngle(this.paperAirplaneAxis, rad);
							// 現在のクォータニオンにかけて動かす（クォータニオンはかけると加算される）
							this.paperAirplaneGroup.quaternion.premultiply(this.q);
							// 回転後に機首のベクトルを更新
							this.startVector = vec4;
						}
						/* 紙ヒコーキの制御 end */
					}
					/* グループの制御 end */
				}
			});
		}

		/**
		 * 描画処理
		 */
		render() {
			// 恒常ループの設定
			requestAnimationFrame(this.render);

			// コントロールを更新
			this.controls.update();

			this.fontArray.forEach(element => {
				element.lookAt(new THREE.Vector3(this.camera.position.x, this.camera.position.y, this.camera.position.z));
			});


			if(this.nowFrame < this.frame && this.isClick){
				// 現在のフレームに対して、0.0 ~ 1.0まででどれくらい割合を持っているか算出
				const ratioGroup = (this.tGroup * this.nowFrame) / this.thetaGroup;
				// イージングをつける
				const eGroup = App3.easeInOutQuint(ratioGroup);
				// イージングをつけた割合を総回転量にかけて、現在フレームまでのイージングがかかった成分を算出
				const easeInSineThetaGroup = eGroup * this.thetaGroup;
				// 今回の結果から前回の結果を引いて、1フレームで動かしたい分の度数を算出
				const differenceGroup = easeInSineThetaGroup - this.beforeGroup;
				// 次回の計算用に今回の結果を保存（差分でなくトータル） 
				this.beforeGroup = easeInSineThetaGroup;
				// 度数 → ラジアン に変換
				const radGroup = differenceGroup * Math.PI / 180;
				// 今回動かしたい分の（差分の）クォータニオンを算出
				this.qGroup = new THREE.Quaternion().setFromAxisAngle(this.axisGroup, radGroup);
				// 現在のクォータニオンにかけて動かす（クォータニオンはかけると加算される）
				this.paperAirplaneGroup.quaternion.premultiply(this.qGroup);
				// 現在のフレームを加算
				this.nowFrame += 1;
			}

			// 最終フレームの場合初期化 + 現在座標を更新
			if(this.nowFrame == 100){
				this.nowFrame = 0;
				this.before = 0;
				this.beforeGroup = 0;
				this.isClick = false;
				this.startPoint.x = this.targetPoint.x;
				this.startPoint.y = this.targetPoint.y;
				this.startPoint.z = this.targetPoint.z;
			}

			// レンダラーで描画
			this.renderer.render(this.scene, this.camera);
		}
	}

</script>


